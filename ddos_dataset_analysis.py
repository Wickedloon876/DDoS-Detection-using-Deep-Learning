# -*- coding: utf-8 -*-
"""DDoS Dataset Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yak9-2xfy_iU6cC8GOCR4m0wH7yQn2cc
"""

#importing Python libraries needed
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

#mounting Google Drive to access the datasets
from google.colab import drive
drive.mount('/content/drive')

#accessing the datasets to build a dataframe
df1 = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/data/Portmap.csv")
df2 = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/data/UDPLag.csv")

"""**The Portmap Dataset**"""

df1.head(5)

df1.shape #shape of the Portmap dataset

df1 = df1.replace([np.inf, -np.inf], np.nan) #replacing abnormally large values with nan
df1.dropna(inplace=True) #dropping all nan values 
df1=df1.drop_duplicates() #dropping all duplicates
#dropping all non-numerical and repetitive features
df1=df1.drop_duplicates()
df1=df1.drop(' Destination IP', axis=1)
df1=df1.drop(' Source IP', axis=1)
df1=df1.drop('Flow ID', axis=1)
df1=df1.drop(' Timestamp', axis=1)
df1=df1.drop('Unnamed: 0', axis=1)
df1=df1.drop('SimillarHTTP', axis=1)
df1.shape

df1[' Label'].value_counts() #number of each attack

#visual representation using histogram
df1[' Label'].hist() 
plt.xlabel("Traffic Type")
plt.ylabel("Count")

"""Filtering for BENIGN"""

df1 = df1.replace([np.inf, -np.inf], np.nan) #removing abnormal values
df1.dropna(inplace=True)

dfBENIGN = df1.sort_values(" Label")
dfBENIGN

filter = dfBENIGN[" Label"]=="BENIGN"
dfBENIGN.where(filter, inplace = True) 
dfBENIGN.dropna(inplace = True)
dfBENIGN

dfBENIGN1 = dfBENIGN.iloc[1:4695, :]
dfBENIGN2 = dfBENIGN1.loc[:, [' Flow Duration',' Total Fwd Packets',' Total Backward Packets',' Flow Packets/s',' Average Packet Size']]
dfBENIGN2.head()

import seaborn as sns
sns.pairplot(dfBENIGN2)

"""Filtering for Portmap"""

dfPortmap = df1.sort_values(" Label")
dfPortmap

filter1 = dfPortmap[" Label"]=="Portmap"
dfPortmap.where(filter1, inplace = True) 
dfPortmap.dropna(inplace = True)
dfPortmap

dfPortmap1 = dfPortmap.iloc[1:100000, :]
dfPortmap2 = dfPortmap1.loc[:, [' Flow Duration',' Total Fwd Packets',' Total Backward Packets',' Flow Packets/s',' Average Packet Size']]
dfPortmap2

import seaborn as sns
sns.pairplot(dfPortmap2)

"""**The UDPlag Dataset**"""

df2.head(5)

df2.shape #shape of the UDPlag dataset

df2 = df2.replace([np.inf, -np.inf], np.nan) #replacing abnormally large values with nan
df2.dropna(inplace=True) #dropping all nan values 
df2=df2.drop_duplicates() #dropping all duplicates
#dropping all non-numerical and repetitive features
df2=df2.drop_duplicates()
df2=df2.drop(' Destination IP', axis=1)
df2=df2.drop(' Source IP', axis=1)
df2=df2.drop('Flow ID', axis=1)
df2=df2.drop(' Timestamp', axis=1)
df2=df2.drop('Unnamed: 0', axis=1)
df2=df2.drop('SimillarHTTP', axis=1)
df2.shape

df2[' Label'].value_counts() #number of each attack

#visual representation using histogram
df2[' Label'].hist() 
plt.xlabel("Traffic Type")
plt.ylabel("Count")

"""Filtering for UDP"""

df2 = df2.replace([np.inf, -np.inf], np.nan) #removing abnormal values
df2.dropna(inplace=True)

dfUDP = df2.sort_values(" Label")
dfUDP

filter = dfUDP[" Label"]=="UDP"
dfUDP.where(filter, inplace = True) 
dfUDP.dropna(inplace = True)
dfUDP

dfUDP1 = dfUDP.iloc[1:100000, :]
dfUDP1 = dfUDP.loc[:, [' Flow Duration',' Total Fwd Packets',' Total Backward Packets',' Flow Packets/s',' Average Packet Size']] #Selecting specific rows and columns
dfUDP1

import seaborn as sns
sns.pairplot(dfUDP1)

"""Filtering for Syn"""

dfSyn = df2.sort_values(" Label")
dfSyn

filter1 = dfSyn[" Label"]=="Syn"
dfSyn.where(filter1, inplace = True) 
dfSyn.dropna(inplace = True)
dfSyn

dfSyn1 = dfSyn.iloc[1:500, :]
dfSyn2 = dfSyn1.loc[:, [' Flow Duration',' Total Fwd Packets',' Total Backward Packets',' Flow Packets/s',' Average Packet Size']]
dfSyn2

import seaborn as sns
sns.pairplot(dfSyn2)

"""Filtering for BENIGN"""

dfBENIGN = df2.sort_values(" Label")
dfBENIGN

filter2 = dfBENIGN[" Label"]=="BENIGN"
dfBENIGN.where(filter2, inplace = True) 
dfBENIGN.dropna(inplace = True)
dfBENIGN

dfBENIGN1 = dfBENIGN.iloc[1:4016, :]
dfBENIGN2 = dfBENIGN1.loc[:, [' Flow Duration',' Total Fwd Packets',' Total Backward Packets',' Flow Packets/s',' Average Packet Size']]
dfBENIGN2

import seaborn as sns
sns.pairplot(dfBENIGN2)

"""Filtering for UDPLag"""

dfUDPLag = df2.sort_values(" Label")
dfUDPLag

filter3 = dfUDPLag[" Label"]=="UDPLag"
dfUDPLag.where(filter3, inplace = True) 
dfUDPLag.dropna(inplace = True)
dfUDPLag

dfUDPLag1 = dfUDPLag.iloc[1:1870, :]
dfUDPLag2 = dfUDPLag1.loc[:, [' Flow Duration',' Total Fwd Packets',' Total Backward Packets',' Flow Packets/s',' Average Packet Size']]
dfUDPLag2

import seaborn as sns
sns.pairplot(dfUDPLag2)

"""**The Combined Dataset**"""

df = pd.concat([df1, df2], axis=0)

df.head(5)

df.shape #shape of the combined dataset

df[' Label'].value_counts() #number of each attack

#visual representation using histogram
df[' Label'].hist() 
plt.xlabel("Traffic Type")
plt.ylabel("Count")